<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XXL-JOB</title>
      <link href="/2022/07/18/%E5%90%8E%E7%AB%AF/%E5%88%86%E5%B8%83%E5%BC%8F/xxl-job/"/>
      <url>/2022/07/18/%E5%90%8E%E7%AB%AF/%E5%88%86%E5%B8%83%E5%BC%8F/xxl-job/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XXL-JOB"><a href="#XXL-JOB" class="headerlink" title="XXL-JOB"></a>XXL-JOB</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>官方文档：<a href="https://www.xuxueli.com/xxl-job/">https://www.xuxueli.com/xxl-job/</a></p><p>XXL-JOB 是一个开箱即用的开源分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。由调度模块和执行模块构成</p><ul><li><p>调度模块（调度中心）：</p><p>负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码。调度系统与任务解耦，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块； 支持可视化、简单且动态的管理调度信息，包括任务新建，更新，删除，GLUE开发和任务报警等，所有上述操作都会实时生效，同时支持监控调度结果以及执行日志，支持执行器Failover。</p></li><li><p>执行模块（执行器）：</p><p>负责接收调度请求并执行任务逻辑。任务模块专注于任务的执行等操作，开发和维护更加简单和高效； 接收“调度中心”的执行请求、终止请求和日志请求等</p></li></ul><p>架构图</p><p><img src="/img/Xxl-job/xxljob_%E6%9E%B6%E6%9E%84.png" alt="XXL-JOB 架构图"></p><p>XXL-JOB 将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。</p><p>将任务抽象成分散的JobHandler，交由“执行器”统一管理，“执行器”负责接收调度请求并执行对应的JobHandler中业务逻辑。</p><p>因此，“调度”和“任务”两部分可以相互解耦，提高系统整体稳定性和扩展性</p><p><strong>注：调度中心支持集群部署，集群情况下各节点务必连接同一个 mysql 实例，如果 mysql 做主从，调度中心集群节点务必强制走主库。</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="部署调度中心"><a href="#部署调度中心" class="headerlink" title="部署调度中心"></a>部署调度中心</h3><ol><li><p>从GitHub获取源码，<a href="https://github.com/xuxueli/xxl-job/releases">Releases · xuxueli&#x2F;xxl-job (github.com)</a>，下载zip解压，使用IDEA打开解压缩后的目录，一共三个模块:</p><p>xxl-job-admin、xxl-job-core、xxl-job-executor-samples，加载maven依赖，展开xxl-job-admin模块，点开application.properties文件，修改数据库链接和access token项，实际生产中应当配置邮箱设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### xxl-job, datasource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root_pwd</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, access token</span></span><br><span class="line"><span class="attr">xxl.job.accessToken</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### xxl-job, email  依赖为：spring-boot-starter-mail</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="attr">spring.mail.port</span>=<span class="string">25</span></span><br><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.from</span>=<span class="string">xxx@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure></li><li><p>从源码中得到sql脚本创建和初始化数据库：脚本文件在xxl-job-x.x.x目录下的doc下的db内，复制脚本执行即可</p></li><li><p>Maven编译打包xxl-job-admin并部署，默认端口8080，地址：”ip:8080&#x2F;xxl-job-admin”，用户名admin，密码123456，具体数据库xxl-job内的xxl_job_user</p></li></ol><h3 id="创建执行器"><a href="#创建执行器" class="headerlink" title="创建执行器"></a>创建执行器</h3><p>即编写应用代码，相应配置可以参考源码xxl-job-executor-samples模块下的xxl-job-executor-sample-springboot模块的写法</p><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xuxueli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxl-job-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">xxl:</span></span><br><span class="line">  <span class="attr">job:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">addresses:</span> <span class="string">http://127.0.0.1:20000/xxl-job-admin</span></span><br><span class="line">    <span class="attr">accessToken:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">executor:</span></span><br><span class="line">      <span class="comment">#???????appname</span></span><br><span class="line">      <span class="attr">appname:</span> <span class="string">spring-xxl-job</span></span><br><span class="line">      <span class="comment">#??????ip:port??address</span></span><br><span class="line">      <span class="attr">address:</span></span><br><span class="line">      <span class="attr">ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="comment">#这个端口不能和server.port一致</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">30001</span></span><br><span class="line">      <span class="attr">logpath:</span> <span class="string">/data/applogs/xxl-job/jobhandler</span></span><br><span class="line">      <span class="attr">logretentiondays:</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>XxlJobConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxlJobConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(XxlJobConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.admin.addresses&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String adminAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.appname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.address&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.ip&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logpath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String logPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxl.job.executor.logretentiondays&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> logRetentionDays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> XxlJobSpringExecutor <span class="title function_">xxlJobExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span>);</span><br><span class="line">        <span class="type">XxlJobSpringExecutor</span> <span class="variable">xxlJobSpringExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XxlJobSpringExecutor</span>();</span><br><span class="line">        xxlJobSpringExecutor.setAdminAddresses(adminAddresses);</span><br><span class="line">        xxlJobSpringExecutor.setAppname(appname);</span><br><span class="line">        xxlJobSpringExecutor.setAddress(address);</span><br><span class="line">        xxlJobSpringExecutor.setIp(ip);</span><br><span class="line">        xxlJobSpringExecutor.setPort(port);</span><br><span class="line">        xxlJobSpringExecutor.setAccessToken(accessToken);</span><br><span class="line">        xxlJobSpringExecutor.setLogPath(logPath);</span><br><span class="line">        xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);</span><br><span class="line">        <span class="keyword">return</span> xxlJobSpringExecutor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TestJobHandler &#123;</span><br><span class="line">    //可以参考源码xxl-job-executor-samples模块下xxl-job-executor-sample-springboot内service.jobHandler写法</span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(TestJobHandler.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @XxlJob(value = &quot;testHandler&quot;)</span><br><span class="line">    public void testHandler() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        //以下是真正业务逻辑</span><br><span class="line">        XxlJobHelper.log(&quot;XXL-JOB, Hello World.&quot;);</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            XxlJobHelper.log(&quot;beat at:&quot; + i);</span><br><span class="line">            System.out.println(&quot;ok&quot;);</span><br><span class="line">            TimeUnit.SECONDS.sleep(2);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加执行器"><a href="#添加执行器" class="headerlink" title="添加执行器"></a>添加执行器</h3><p>在web调度中心添加执行器，手动录入需要填入执行器所配置的地址，不是server.port，是<a href="http://executor.ip:executor.port">http://executor.ip:executor.port</a></p><p><img src="/img/Xxl-job/xxljob_%E6%B7%BB%E5%8A%A0%E6%89%A7%E8%A1%8C%E5%99%A8.png" alt="image-20220718232521680"></p><h3 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h3><p><img src="/img/Xxl-job/xxljob_%E6%B7%BB%E5%8A%A0%E4%BB%BB%E5%8A%A1.png" alt="xxljob_添加任务"></p><h3 id="启动任务"><a href="#启动任务" class="headerlink" title="启动任务"></a>启动任务</h3><p><img src="/img/Xxl-job/xxljob_%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1.png" alt="image-20220718233851333"></p><h2 id="分布式任务"><a href="#分布式任务" class="headerlink" title="分布式任务"></a>分布式任务</h2><p>多台机器，修改web调度中心配置的执行器，将各个机器executor.ip和executor.port手动配置在机器地址栏</p><p><img src="/img/Xxl-job/xxljob_%E5%88%86%E5%B8%83%E5%BC%8F%E6%89%A7%E8%A1%8C%E5%99%A8.png" alt="image-20220719002719491"></p><p>然后修改任务执行策略</p><p><img src="/img/Xxl-job/xxljob_%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1.png" alt="image-20220719002852538"></p><p>以轮询为例，启动任务后，观察各台机器是否轮流调用</p><p>策略详解：</p><ul><li>第一个：顾名思义</li><li>最后一个：顾名思义</li><li>轮询：顾名思义</li><li>随机：顾名思义</li><li>一致性hash：根据一致性Hash算法将任务发送到指定节点，源码<code>com.xxl.job.admin.core.route.strategy.ExecutorRouteConsistentHash</code></li><li>最不经常使用：顾名思义</li><li>最近最久未使用：在一个时间段内最少使用的</li><li>故障转移：按照顺序进行心跳检测，机器如果出问题转移到下一个存活的机器</li><li>忙碌转移：按照顺序进行空闲检测，反馈500或没有响应，转移到下一个空闲机器</li><li>分片广播：每个机器广播到，都执行任务，同时系统自动传递分片参数：可根据分片参数开发分片任务</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 分布式 </category>
          
          <category> XXL-JOB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xxl-Job </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artifactory</title>
      <link href="/2022/07/17/%E8%BF%90%E7%BB%B4/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Artifactory/"/>
      <url>/2022/07/17/%E8%BF%90%E7%BB%B4/%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/Artifactory/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Artifactory"><a href="#Artifactory" class="headerlink" title="Artifactory"></a>Artifactory</h1><p>系统要求最低4核8GB</p><h2 id="基于Linux安装"><a href="#基于Linux安装" class="headerlink" title="基于Linux安装"></a>基于Linux安装</h2><p>地址：<a href="https://jfrog.com/community/download-artifactory-oss/">Download Artifactory OSS | JFrog</a>，选择linux，下载tar.gz</p><p>使用：解压缩tar.gz文件后，进入文件夹内的app目录，进入bin目录，如果想把Artifactory作为linux服务，使用方式1，否则使用方式2</p><ul><li>方式一：执行<code>sudo bash installService.sh</code>，之后<code>systemctl start artifactory.service</code>启动服务，开放8082，浏览器使用ip加端口访问</li><li>方式二：直接执行<code>./artifactory start</code>命令启动artifactory</li></ul><h2 id="基于Docker安装"><a href="#基于Docker安装" class="headerlink" title="基于Docker安装"></a>基于Docker安装</h2><p>命令：</p><ul><li><p>拉去镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker.bintray.io/jfrog/artifactory-oss:7.29.8</span><br></pre></td></tr></table></figure></li><li><p>给挂载的目录授权 chmod -R 777</p></li><li><p>运行容器：<code>docker run -d --name artifactory -p 18082:8082 -p 18081:8081 -v /home/datas/artifactory/:/var/opt/jfrog/artifactory docker.bintray.io/jfrog/artifactory-oss:7.29.8</code></p></li></ul><p>不建议直接拉去最新版，鬼知道会有什么问题，例如7.41.4，会一直卡在loading页面</p><h2 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h2><p><strong>创建本地仓库</strong></p><p>点击 “设置” –&gt; “Repositories” –&gt; “Add Repositories” –&gt; “Local Repository”</p><p>包类型选择maven</p><p>Repository Key 填入仓库名称(自己起一个名字) self-release-local</p><p><strong>创建远程仓库</strong></p><p>创建的时候包类型依然选择maven，此处advanced可以修改超时时间</p><p>Repository Key 填入self-release-remote</p><p>URL填入一个第三方仓库地址(推荐ali仓库)</p><p><strong>创建虚拟仓库</strong></p><p>创建的时候包类型依然选择maven</p><p>填入self-release-virtual</p><p>将上面创建的本地仓库aliyun-release-local和 远程仓库self-release-remote 加入到我们创建的虚拟仓库中，同时设置Default Deployment Repositor为我们的本地仓库 self-release-local ，这样设置之后我们开发的是后就直接设置maven的仓库地址为虚拟仓库self-release-virtual，找不到的jar包会从远程仓库中找，同时我们发布的jar包会直接发布到artifactory的本地仓库 self-release-local中</p><h2 id="maven-conf-设置"><a href="#maven-conf-设置" class="headerlink" title="maven conf 设置"></a>maven conf 设置</h2><p>点击”菜单” –&gt; “Artifactory” –&gt; “Artifacts” –&gt; “self-release-virtual” –&gt; “Set Me Up”， 选择Repository 为self-release-virtual， 在configure中我们输入密码，Generate Settings，Download Snippet</p><p>生成的xml文件中，username改为我们自己的名字</p><p>password可以改成明文密码，或者保留双引号中的内容；例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>APAxiw4q2j1uY4U1GJXXh2ocpV8<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的内容粘到maven conf内替代，mirror内的东西可以不要了</p><p>如果想使用maven deploy，“Set Me Up”， 选择Repository 为self-release-virtual，选择deploy界面，复制配置添加到项目pom中</p><h2 id="POM设置"><a href="#POM设置" class="headerlink" title="POM设置"></a>POM设置</h2><p>建议pom文件repository、pluginRepository照着生成的xml复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>self-release-virtual<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.200:18082/artifactory/self-release-virtual<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>self-release-virtual<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.200:18082/artifactory/self-release-virtual<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 私有仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Artifactory </tag>
            
            <tag> 私有仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cache</title>
      <link href="/2022/07/14/%E5%90%8E%E7%AB%AF/Spring/Spring%20Cache/"/>
      <url>/2022/07/14/%E5%90%8E%E7%AB%AF/Spring/Spring%20Cache/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Cache 是Spring 提供的一整套的缓存解决方案，它不是具体的缓存实现，它只提供一整套的接口和代码规范、配置、注解等，用于整合各种缓存方案，比如Caffeine、Guava Cache、Ehcache，其基于注解和Spring高级特性提供缓存读写以及失效刷新等各种能力</p><ul><li><strong>EhCache</strong>：纯Java进程内缓存框架，也是Hibernate、MyBatis默认的缓存提供。</li><li><strong>Caffeine</strong>：使用Java8对Guava缓存的重写版本，从Spring5开始，Spring默认删除了Guava而使用Caffeine，支持多种缓存过期策略。</li><li><strong>jcache</strong>：实现了JSR107规范的三方缓存都可以通过此包得到适配</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h2><p>Spring Cache依赖Spring的天然优势——AOP，我们只需要显式地在代码中调用第三方接口，在方法上加上注解，就可以实现把获取到的结果插入缓存内，在下一次查询的时候优先从缓存中读取数据。</p><p>简单总结就是3步：加依赖，开启缓存、加注解</p><p><strong>一、加依赖</strong></p><p>maven:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>二、开启缓存</strong></p><p>需要在启动类加上@EnableCaching注解才能启动使用Spring Cache</p><p><strong>三、加注解</strong></p><p>在需要缓存返回结果的方法上加上注解@Cacheable即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable(&quot;homeBookCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCaffeine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">996</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a><strong>常用注解</strong></h2><p>Spring Cache比较常用的几个注解：@Cacheable、 @CacheConfig、@CacheEvict、@CachePut、@Caching、@EnableCaching。spring-context依赖包下也能看到注解的定义</p><p>除了CacheConfig只能用于类上，其余的都可以用在类或者方法上，用在方法上好理解，缓存方法结果，如果用在类上，就相当于对该类的所有可以缓存的方法（需要是public方法）加上注解。</p><p><strong>@Cacheable</strong></p><p>@Cacheble注解表示这个方法(<strong>需要是public方法</strong>)的结果可以被缓存，调用该方法前，会先检查对应的缓存key在缓存中是否已经有值，如果有就直接返回，不调用方法，如果没有，就会调用方法，同时把结果缓存起来。</p><p><strong>@CacheConfig</strong></p><p>有些配置可能又是一个类通用的，这种情况就可以使用@CacheConfig了，它是一个类级别的注解，可以在类级别上配置cacheNames、keyGenerator、cacheManager、cacheResolver等。</p><p><strong>@CachePut</strong></p><p>@CachePut注解修饰的方法，会把方法的返回值put到缓存里面缓存起来，它只是触发put的动作，和@Cacheable不同，不会读取缓存，put到缓存的值进程内其他场景的使用者就可以使用了。</p><p><strong>@CacheEvict</strong></p><p>@CacheEvict注解修饰的方法，会触发缓存的evict操作，清空缓存中指定key的值。</p><p><strong>@Caching</strong></p><p>@Caching能够支持多个缓存注解生效。</p><h2 id="结合Caffeine"><a href="#结合Caffeine" class="headerlink" title="结合Caffeine"></a>结合Caffeine</h2><p>ConcurrentMapCache是Spring 内置默认的缓存实现，如果需要使用CaffeineCache，需要额外引入CaffeineCache包</p><p>maven依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;caffeine&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConsts</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页小说推荐缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HOME_BOOK_CACHE_NAME</span> <span class="operator">=</span> <span class="string">&quot;homeBookCache&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存配置常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CacheEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">        HOME_BOOK_CACHE(<span class="number">0</span>, HOME_BOOK_CACHE_NAME, <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>, <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 缓存类型 0-本地 1-本地和远程 2-远程  这个参数根据实际情况添加</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 缓存的名字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 失效时间（秒） 0-永不失效</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> ttl;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最大容量</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">        CacheEnum(<span class="type">int</span> type, String name, <span class="type">int</span> ttl, <span class="type">int</span> maxSize) &#123;</span><br><span class="line">            <span class="built_in">this</span>.type = type;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.ttl = ttl;</span><br><span class="line">            <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocal</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> type &lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRemote</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> type &gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTtl</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ttl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> maxSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaffeineConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Caffeine 缓存管理器</span></span><br><span class="line"><span class="comment">     * 注入不同的缓存，从而根据需求修改缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">caffeineCacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCacheManager</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;CaffeineCache&gt; caches = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(CacheConsts.CacheEnum.values().length);</span><br><span class="line">        <span class="keyword">for</span> (CacheConsts.CacheEnum c : CacheConsts.CacheEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.isLocal()) &#123;</span><br><span class="line">                Caffeine&lt;Object, Object&gt; caffeine = Caffeine.newBuilder().recordStats().maximumSize(c.getMaxSize());</span><br><span class="line">                <span class="keyword">if</span> (c.getTtl() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    caffeine.expireAfterWrite(Duration.ofSeconds(c.getTtl()));</span><br><span class="line">                &#125;</span><br><span class="line">                caches.add(<span class="keyword">new</span> <span class="title class_">CaffeineCache</span>(c.getName(), caffeine.build()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cacheManager.setCaches(caches);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">CaffeineCacheManager</span> <span class="variable">caffeineCacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CaffeineCacheManager</span>();</span><br><span class="line">    Caffeine&lt;Object, Object&gt; caffeine = Caffeine.newBuilder().expireAfterWrite(<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line">    caffeineCacheManager.setCaffeine(caffeine);</span><br><span class="line">    <span class="keyword">return</span> caffeineCacheManager;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="使用-Cacheable缓存不起作用"><a href="#使用-Cacheable缓存不起作用" class="headerlink" title="使用@Cacheable缓存不起作用"></a>使用<code>@Cacheable</code>缓存不起作用</h3><p><strong>失效场景</strong></p><ul><li>在私有方法上加缓存</li><li>类内部方法调用加缓存</li></ul><p><strong>失效原因</strong></p><ul><li>Spring cache 的实现原理是基于 AOP 的动态代理实现的：即都在方法调用前后去获取方法的名称、参数、返回值，然后根据方法名称、参数生成缓存的key(自定义的key例外)，进行缓存。</li><li>AOP 不支持对 private 私有方法的拦截，所以也就不支持私有方法上的 Spring Cache 注解。</li><li>this 调用不是代理对象的调用, 所以 AOP 失效，注解失效。</li></ul><p><strong>解决办法</strong></p><ol><li>方法用 <code>public</code> 限定符修饰；</li><li>类内部方法调用加缓存时可以用 <code>SpringContextUtil</code> 获取当前 <code>Bean</code> ,由它来调用</li></ol><p><strong>SpringContextUtil</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">containsBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.containsBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isSingleton</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.isSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; getType(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getType(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
          <category> Spring </category>
          
          <category> Spring Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cache </tag>
            
            <tag> Cache </tag>
            
            <tag> Caffeine </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caffeine</title>
      <link href="/2022/07/13/%E5%90%8E%E7%AB%AF/%E7%BB%84%E4%BB%B6/Caffeine/"/>
      <url>/2022/07/13/%E5%90%8E%E7%AB%AF/%E7%BB%84%E4%BB%B6/Caffeine/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>caffeine</code>是一款高性能的本地缓存组件。</p><p>项目地址：<a href="https://github.com/ben-manes/caffeine">https://github.com/ben-manes/caffeine</a></p><p>官方文档提供了中文支持，地址：<a href="https://github.com/ben-manes/caffeine/wiki/Population-zh-CN">https://github.com/ben-manes/caffeine/wiki/Population-zh-CN</a></p><p>maven依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>Caffeine</code>的版本需要和<code>JDK</code>对应，比如最新版本（<code>3.0.5</code>）对应的<code>jdk</code>为<code>11</code>，如果<code>jdk</code>版本太低，会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java:无法访问com.github.benmanes.caffeine.cache.Cache</span><br></pre></td></tr></table></figure><p>基本的put、get、过期都已满足实现，但多个场景下，多种过期时间没有显示提供(内部有相应api)</p><p>因为只能设置keySize，如果存入的key都是大key，例：1000个key*10M&#x3D;10G，机器分配的内存小点直接OOM；解决方案：设置内存上限，进⾏内存淘汰(需要改造源码，参考<a href="https://www.bilibili.com/video/BV1RL411A79U?spm_id_from=333.999.0.0&vd_source=cb2a677ac4f6cc70458386f617524bb4">本地缓存之王Caffeine的源码阅读和手把手改造源码_哔哩哔哩_bilibili</a>)，或者大key不存在Caffine中</p><p>综上，适用于读多写少的业务场景</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;Object, Object&gt; cache=Caffeine.newBuilder().build();</span><br></pre></td></tr></table></figure><p>在<code>newBuilder()</code>后<code>build()</code>方法前，可以使用提供的方法设置缓存，包括但不限于如下</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>expireAfterWrite</td><td>写入过期时间</td></tr><tr><td>expireAfterAccess</td><td>访问后过期时间</td></tr><tr><td>expireAfter</td><td>创建后过期时间，可用于设置不同过期时间</td></tr><tr><td>maximumSize</td><td>指定缓存的最大存储数量，在缓存达到该限制会移除最近没有用过，或者使用频次较低的缓存，当然在达到缓存的临界点时，可能会出现暂时超出限制的情况。如果该值被设置为<code>0</code>，则缓存在加载后后会立即失效（类似于禁用）</td></tr><tr><td>evictionListener</td><td>驱逐事件监听器，使用时重写RemovalListener，泛型跟缓存要一致</td></tr><tr><td>removalListener</td><td>移除元素监听器，使用时重写RemovalListener，泛型跟缓存要一致</td></tr><tr><td>recordStats</td><td>记录缓存状态，之后通过cache的stats方法获取CacheStats对象，查看各种状态，例如hitcount、misscount</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>Caffeine</code>提供了四种缓存添加策略：</p><ul><li>手动加载</li><li>自动加载</li><li>手动异步加载</li><li>自动异步加载</li></ul><h3 id="手动加载"><a href="#手动加载" class="headerlink" title="手动加载"></a><strong>手动加载</strong></h3><p>手动加载其实就是通过官方提供的<code>api</code>，比如<code>get</code>、<code>put</code>、<code>invalidate</code>等接口，手动操作缓存，关于这块的详细描述，官方文档也给出了详细说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache 接口提供了显式搜索查找、更新和移除缓存元素的能力。</span><br><span class="line">缓存元素可以通过调用 cache.put(key, value)方法被加入到缓存当中。如果缓存中指定的key已经存在对应的缓存元素的话，那么先前的缓存的元素将会被直接覆盖掉。因此，通过 cache.get(key, k -&gt; value) 的方式将要缓存的元素通过原子计算的方式 插入到缓存中，以避免和其他写入进行竞争。值得注意的是，当缓存的元素无法生成或者在生成的过程中抛出异常而导致生成元素失败，cache.get 也许会返回 null 。 当然，也可以使用Cache.asMap()所暴露出来的ConcurrentMap的方法对缓存进行操作。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;String, Integer&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    cache = Caffeine.newBuilder()</span><br><span class="line">                <span class="comment">//访问元素后多少秒失效</span></span><br><span class="line">                .expireAfterAccess(<span class="number">100L</span>, TimeUnit.SECONDS)</span><br><span class="line">                .maximumSize(<span class="number">1</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 查找一个缓存元素， 没有查找到的时候返回null</span></span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;zero&quot;</span>));</span><br><span class="line">    <span class="comment">// 添加或者更新一个缓存元素</span></span><br><span class="line">    cache.put(<span class="string">&quot;first&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;second&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;second&quot;</span>));</span><br><span class="line">    <span class="comment">// 查找缓存，如果缓存不存在则生成缓存元素, 如果无法生成则返回null</span></span><br><span class="line">    cache.get(<span class="string">&quot;third&quot;</span>,k-&gt;createInteger(k));</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;third&quot;</span>));</span><br><span class="line">    <span class="comment">// 移除一个缓存元素</span></span><br><span class="line">    cache.invalidate(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;third&quot;</span>));</span><br><span class="line">    <span class="comment">//Cache.asMap()所暴露出来的ConcurrentMap的方法对缓存进行操作</span></span><br><span class="line">    ConcurrentMap&lt;String, Integer&gt; map = cache.asMap();</span><br><span class="line">    map.putIfAbsent(<span class="string">&quot;fourth&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;fourth&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">createInteger</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>自动加载，顾名思义就是查不到数据时，系统会自动帮我们生成元素的缓存，只是这里构建的是<code>LoadingCache</code>，同时需要指定元素缓存的构造方法（也就是获取对象的方式，比如查库获取）</p><p><code>LoadingCache</code>是一个<code>Cache</code> 附加上 <code>CacheLoader</code>之后的缓存实现</p><p>通过 <code>getAll</code>可以达到批量查找缓存的目的。 默认情况下，在<code>getAll</code> 方法中，将会对每个不存在对应缓存的key调用一次 <code>CacheLoader.load</code> 来生成缓存元素。 在批量检索比单个查找更有效率的场景下，你可以重写Caffeine.build()方法，并开发<code>CacheLoader.loadAll</code> 方法来使你的缓存更有效率。</p><p>值得注意的是，你可以通过实现一个 <code>CacheLoader.loadAll</code>并在其中为没有在参数中请求的key也生成对应的缓存元素。打个比方，如果对应某个key生成的缓存元素与包含这个key的一组集合剩余的key所对应的元素一致，那么在<code>loadAll</code>中也可以同时加载剩下的key对应的元素到缓存当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache =  Caffeine.newBuilder().maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES).build(CaffeineTest::createObject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同上面写法，批量检索可以重写loadAll</span></span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">public void init() &#123;</span></span><br><span class="line"><span class="comment">    cache =  Caffeine.newBuilder().maximumSize(10_000)</span></span><br><span class="line"><span class="comment">                .expireAfterWrite(10, TimeUnit.MINUTES).build(new CacheLoader&lt;&gt;() &#123;</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public @Nullable Object load(String s) throws Exception &#123;</span></span><br><span class="line"><span class="comment">                        return createObject(s);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在则生成缓存，如果无法生成则返回null；</span></span><br><span class="line">    System.out.println(cache.get(<span class="string">&quot;first&quot;</span>));</span><br><span class="line">    <span class="comment">//批量查找缓存</span></span><br><span class="line">    List&lt;String&gt; keys=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    keys.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    keys.add(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; all = cache.getAll(keys);</span><br><span class="line">    all.forEach((k,v)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;k:&quot;</span>+k+<span class="string">&quot;,v:&quot;</span>+v);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动异步加载"><a href="#手动异步加载" class="headerlink" title="手动异步加载"></a><strong>手动异步加载</strong></h3><p>手动异步加载和手动加载类似，唯一的区别是这里的缓存加载是异步的。<code>AsyncCache</code>提供了在 <code>Executor</code>上生成缓存元素并返回 <code>CompletableFuture</code>的能力，<code>synchronous()</code>方法给 <code>Cache</code>提供了阻塞直到异步缓存生成完毕的能力。</p><p><code>AsyncCache</code>默认的线程池实现是 <code>ForkJoinPool.commonPool()</code>，当然你也可以通过覆盖并实现 <code>Caffeine.executor(Executor)</code>方法来自定义你的线程池选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">AsyncCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache =  Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .buildAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在则返回null；</span></span><br><span class="line">    CompletableFuture&lt;Object&gt; first = cache.getIfPresent(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (first!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(first.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在，则异步生成</span></span><br><span class="line">    CompletableFuture&lt;Object&gt; second = cache.get(<span class="string">&quot;second&quot;</span>, k -&gt; createObject(k));</span><br><span class="line">    System.out.println(second.get());</span><br><span class="line">    <span class="comment">//添加或更新元素</span></span><br><span class="line">    cache.put(<span class="string">&quot;third&quot;</span>, CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3333</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    cache.synchronous().invalidate(<span class="string">&quot;fourth&quot;</span>);</span><br><span class="line">    CompletableFuture&lt;Object&gt; third = cache.getIfPresent(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    System.out.println(third.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> key+<span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动异步加载"><a href="#自动异步加载" class="headerlink" title="自动异步加载"></a><strong>自动异步加载</strong></h3><p>自动异步加载和自动加载对应，只是这里的加载是异步的，和手动异步加载一样，当然因为是自动加载，所以需要我们指定缓存加载方法。默认情况下，采用的线程池也是<code>ForkJoinPool.commonPool()</code>，另外自动异步加载也支持自定义线程池类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">AsyncLoadingCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">            <span class="comment">// 你可以选择: 去异步的封装一段同步操作来生成缓存元素</span></span><br><span class="line">            .buildAsync(key3 -&gt; createObject(key3));</span><br><span class="line">            <span class="comment">// 你也可以选择: 构建一个异步缓存元素操作并返回一个future</span></span><br><span class="line">            <span class="comment">// .buildAsync((key, executor) -&gt; createExpensiveGraphAsync(key, executor));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    CompletableFuture&lt;Object&gt; first = cache.get(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    System.out.println(first.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Caffeine执行流程"><a href="#Caffeine执行流程" class="headerlink" title="Caffeine执行流程"></a>Caffeine执行流程</h2><p><img src="/img/Caffeine/Caffeine_01.png" alt="Caffeine执行流程"></p><p>若：writeBuffer满了，异步任务处理不过来，主动同步调起：maintenance任务处理消费buffer|节点过期|节点淘汰</p><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><ul><li><p>全局统一过期：创建缓存时，通过相应expire开头的api设置</p></li><li><p>不同key，不同过期时间：创建缓存时调用expireAfter方法，底层使用时间轮过期算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expireAfter(<span class="keyword">new</span> <span class="title class_">Expiry</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterCreate</span><span class="params">(String s, Integer integer, <span class="type">long</span> currentTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterUpdate</span><span class="params">(String s, Integer integer, <span class="type">long</span> l, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentDuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterRead</span><span class="params">(String s, Integer integer, <span class="type">long</span> l, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentDuration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cache.policy().expireVariably().ifPresent(policy -&gt; &#123;</span><br><span class="line">    policy.put(<span class="string">&quot;first&quot;</span>, <span class="number">1</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    policy.put(<span class="string">&quot;second&quot;</span>, <span class="number">2</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
          <category> 组件 </category>
          
          <category> Caffeine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> Caffeine </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/12/hello-world/"/>
      <url>/2022/07/12/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Butterfly-Theme"><a href="#Butterfly-Theme" class="headerlink" title="Butterfly Theme"></a>Butterfly Theme</h3><p>More info: <a href="https://vlts.cc/v5/getting-started/">Doc</a></p><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
