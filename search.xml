<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Caffeine</title>
      <link href="/2022/07/13/Caffeine/"/>
      <url>/2022/07/13/Caffeine/</url>
      
        <content type="html"><![CDATA[<h1 id="Caffeine"><a href="#Caffeine" class="headerlink" title="Caffeine"></a>Caffeine</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>caffeine</code>是一款高性能的本地缓存组件。</p><p>项目地址：<a href="https://github.com/ben-manes/caffeine%EF%BC%8C%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81%EF%BC%8C%E5%9C%B0%E5%9D%80%EF%BC%9Ahttps://github.com/ben-manes/caffeine/wiki/Population-zh-CN">https://github.com/ben-manes/caffeine，官方文档提供了中文支持，地址：https://github.com/ben-manes/caffeine/wiki/Population-zh-CN</a></p><p>maven依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<code>Caffeine</code>的版本需要和<code>JDK</code>对应，比如最新版本（<code>3.0.5</code>）对应的<code>jdk</code>为<code>11</code>，如果<code>jdk</code>版本太低，会报如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java:无法访问com.github.benmanes.caffeine.cache.Cache</span><br></pre></td></tr></table></figure><p>基本的put、get、过期都已满足实现，但多个场景下，多种过期时间没有显示提供(内部有相应api)</p><p>因为只能设置keySize，如果存入的key都是大key，例：1000个key*10M&#x3D;10G，机器分配的内存小点直接OOM；解决方案：设置内存上限，进⾏内存淘汰(需要改造源码，参考<a href="https://www.bilibili.com/video/BV1RL411A79U?spm_id_from=333.999.0.0&vd_source=cb2a677ac4f6cc70458386f617524bb4">本地缓存之王Caffeine的源码阅读和手把手改造源码_哔哩哔哩_bilibili</a>)，或者大key不存在Caffine中</p><p>综上，适用于读多写少的业务场景</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;Object, Object&gt; cache=Caffeine.newBuilder().build();</span><br></pre></td></tr></table></figure><p>在<code>newBuilder()</code>后<code>build()</code>方法前，可以使用提供的方法设置缓存，包括但不限于如下</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>expireAfterWrite</td><td>写入过期时间</td></tr><tr><td>expireAfterAccess</td><td>访问后过期时间</td></tr><tr><td>expireAfter</td><td>创建后过期时间，可用于设置不同过期时间</td></tr><tr><td>maximumSize</td><td>指定缓存的最大存储数量，在缓存达到该限制会移除最近没有用过，或者使用频次较低的缓存，当然在达到缓存的临界点时，可能会出现暂时超出限制的情况。如果该值被设置为<code>0</code>，则缓存在加载后后会立即失效（类似于禁用）</td></tr><tr><td>evictionListener</td><td>驱逐事件监听器，使用时重写RemovalListener，泛型跟缓存要一致</td></tr><tr><td>removalListener</td><td>移除元素监听器，使用时重写RemovalListener，泛型跟缓存要一致</td></tr><tr><td>recordStats</td><td>记录缓存状态，之后通过cache的stats方法获取CacheStats对象，查看各种状态，例如hitcount、misscount</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>Caffeine</code>提供了四种缓存添加策略：</p><ul><li>手动加载</li><li>自动加载</li><li>手动异步加载</li><li>自动异步加载</li></ul><h3 id="手动加载"><a href="#手动加载" class="headerlink" title="手动加载"></a><strong>手动加载</strong></h3><p>手动加载其实就是通过官方提供的<code>api</code>，比如<code>get</code>、<code>put</code>、<code>invalidate</code>等接口，手动操作缓存，关于这块的详细描述，官方文档也给出了详细说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache 接口提供了显式搜索查找、更新和移除缓存元素的能力。</span><br><span class="line">缓存元素可以通过调用 cache.put(key, value)方法被加入到缓存当中。如果缓存中指定的key已经存在对应的缓存元素的话，那么先前的缓存的元素将会被直接覆盖掉。因此，通过 cache.get(key, k -&gt; value) 的方式将要缓存的元素通过原子计算的方式 插入到缓存中，以避免和其他写入进行竞争。值得注意的是，当缓存的元素无法生成或者在生成的过程中抛出异常而导致生成元素失败，cache.get 也许会返回 null 。 当然，也可以使用Cache.asMap()所暴露出来的ConcurrentMap的方法对缓存进行操作。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Cache&lt;String, Integer&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    cache = Caffeine.newBuilder()</span><br><span class="line">                <span class="comment">//访问元素后多少秒失效</span></span><br><span class="line">                .expireAfterAccess(<span class="number">100L</span>, TimeUnit.SECONDS)</span><br><span class="line">                .maximumSize(<span class="number">1</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 查找一个缓存元素， 没有查找到的时候返回null</span></span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;zero&quot;</span>));</span><br><span class="line">    <span class="comment">// 添加或者更新一个缓存元素</span></span><br><span class="line">    cache.put(<span class="string">&quot;first&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;second&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;second&quot;</span>));</span><br><span class="line">    <span class="comment">// 查找缓存，如果缓存不存在则生成缓存元素, 如果无法生成则返回null</span></span><br><span class="line">    cache.get(<span class="string">&quot;third&quot;</span>,k-&gt;createInteger(k));</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;third&quot;</span>));</span><br><span class="line">    <span class="comment">// 移除一个缓存元素</span></span><br><span class="line">    cache.invalidate(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;third&quot;</span>));</span><br><span class="line">    <span class="comment">//Cache.asMap()所暴露出来的ConcurrentMap的方法对缓存进行操作</span></span><br><span class="line">    ConcurrentMap&lt;String, Integer&gt; map = cache.asMap();</span><br><span class="line">    map.putIfAbsent(<span class="string">&quot;fourth&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    System.out.println(cache.getIfPresent(<span class="string">&quot;fourth&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">createInteger</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>自动加载，顾名思义就是查不到数据时，系统会自动帮我们生成元素的缓存，只是这里构建的是<code>LoadingCache</code>，同时需要指定元素缓存的构造方法（也就是获取对象的方式，比如查库获取）</p><p><code>LoadingCache</code>是一个<code>Cache</code> 附加上 <code>CacheLoader</code>之后的缓存实现</p><p>通过 <code>getAll</code>可以达到批量查找缓存的目的。 默认情况下，在<code>getAll</code> 方法中，将会对每个不存在对应缓存的key调用一次 <code>CacheLoader.load</code> 来生成缓存元素。 在批量检索比单个查找更有效率的场景下，你可以重写Caffeine.build()方法，并开发<code>CacheLoader.loadAll</code> 方法来使你的缓存更有效率。</p><p>值得注意的是，你可以通过实现一个 <code>CacheLoader.loadAll</code>并在其中为没有在参数中请求的key也生成对应的缓存元素。打个比方，如果对应某个key生成的缓存元素与包含这个key的一组集合剩余的key所对应的元素一致，那么在<code>loadAll</code>中也可以同时加载剩下的key对应的元素到缓存当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache =  Caffeine.newBuilder().maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES).build(CaffeineTest::createObject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同上面写法，批量检索可以重写loadAll</span></span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">public void init() &#123;</span></span><br><span class="line"><span class="comment">    cache =  Caffeine.newBuilder().maximumSize(10_000)</span></span><br><span class="line"><span class="comment">                .expireAfterWrite(10, TimeUnit.MINUTES).build(new CacheLoader&lt;&gt;() &#123;</span></span><br><span class="line"><span class="comment">                    @Override</span></span><br><span class="line"><span class="comment">                    public @Nullable Object load(String s) throws Exception &#123;</span></span><br><span class="line"><span class="comment">                        return createObject(s);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">    &#125;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在则生成缓存，如果无法生成则返回null；</span></span><br><span class="line">    System.out.println(cache.get(<span class="string">&quot;first&quot;</span>));</span><br><span class="line">    <span class="comment">//批量查找缓存</span></span><br><span class="line">    List&lt;String&gt; keys=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    keys.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    keys.add(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; all = cache.getAll(keys);</span><br><span class="line">    all.forEach((k,v)-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;k:&quot;</span>+k+<span class="string">&quot;,v:&quot;</span>+v);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动异步加载"><a href="#手动异步加载" class="headerlink" title="手动异步加载"></a><strong>手动异步加载</strong></h3><p>手动异步加载和手动加载类似，唯一的区别是这里的缓存加载是异步的。<code>AsyncCache</code>提供了在 <code>Executor</code>上生成缓存元素并返回 <code>CompletableFuture</code>的能力，<code>synchronous()</code>方法给 <code>Cache</code>提供了阻塞直到异步缓存生成完毕的能力。</p><p><code>AsyncCache</code>默认的线程池实现是 <code>ForkJoinPool.commonPool()</code>，当然你也可以通过覆盖并实现 <code>Caffeine.executor(Executor)</code>方法来自定义你的线程池选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">AsyncCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache =  Caffeine.newBuilder()</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .buildAsync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在则返回null；</span></span><br><span class="line">    CompletableFuture&lt;Object&gt; first = cache.getIfPresent(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (first!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(first.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找缓存，如果不存在，则异步生成</span></span><br><span class="line">    CompletableFuture&lt;Object&gt; second = cache.get(<span class="string">&quot;second&quot;</span>, k -&gt; createObject(k));</span><br><span class="line">    System.out.println(second.get());</span><br><span class="line">    <span class="comment">//添加或更新元素</span></span><br><span class="line">    cache.put(<span class="string">&quot;third&quot;</span>, CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3333</span>;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">//移除元素</span></span><br><span class="line">    cache.synchronous().invalidate(<span class="string">&quot;fourth&quot;</span>);</span><br><span class="line">    CompletableFuture&lt;Object&gt; third = cache.getIfPresent(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    System.out.println(third.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> key+<span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动异步加载"><a href="#自动异步加载" class="headerlink" title="自动异步加载"></a><strong>自动异步加载</strong></h3><p>自动异步加载和自动加载对应，只是这里的加载是异步的，和手动异步加载一样，当然因为是自动加载，所以需要我们指定缓存加载方法。默认情况下，采用的线程池也是<code>ForkJoinPool.commonPool()</code>，另外自动异步加载也支持自定义线程池类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">AsyncLoadingCache&lt;String, Object&gt; cache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    cache = Caffeine.newBuilder()</span><br><span class="line">            .maximumSize(<span class="number">10_000</span>)</span><br><span class="line">            .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">            <span class="comment">// 你可以选择: 去异步的封装一段同步操作来生成缓存元素</span></span><br><span class="line">            .buildAsync(key3 -&gt; createObject(key3));</span><br><span class="line">            <span class="comment">// 你也可以选择: 构建一个异步缓存元素操作并返回一个future</span></span><br><span class="line">            <span class="comment">// .buildAsync((key, executor) -&gt; createExpensiveGraphAsync(key, executor));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> &#123;</span><br><span class="line">    CompletableFuture&lt;Object&gt; first = cache.get(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    System.out.println(first.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">createObject</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">//业务中根据key做实际处理，例如查库</span></span><br><span class="line">    <span class="keyword">return</span> key + <span class="string">&quot;Caffeine&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Caffeine执行流程"><a href="#Caffeine执行流程" class="headerlink" title="Caffeine执行流程"></a>Caffeine执行流程</h2><p><img src="/img/Caffeine/Caffeine_01.png" alt="Caffeine执行流程"></p><p>若：writeBuffer满了，异步任务处理不过来，主动同步调起：maintenance任务处理消费buffer|节点过期|节点淘汰</p><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><ul><li><p>全局统一过期：创建缓存时，通过相应expire开头的api设置</p></li><li><p>不同key，不同过期时间：创建缓存时调用expireAfter方法，底层使用时间轮过期算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">expireAfter(<span class="keyword">new</span> <span class="title class_">Expiry</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterCreate</span><span class="params">(String s, Integer integer, <span class="type">long</span> currentTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterUpdate</span><span class="params">(String s, Integer integer, <span class="type">long</span> l, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentDuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">expireAfterRead</span><span class="params">(String s, Integer integer, <span class="type">long</span> l, <span class="meta">@NonNegative</span> <span class="type">long</span> currentDuration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentDuration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cache.policy().expireVariably().ifPresent(policy -&gt; &#123;</span><br><span class="line">    policy.put(<span class="string">&quot;first&quot;</span>, <span class="number">1</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    policy.put(<span class="string">&quot;second&quot;</span>, <span class="number">2</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
          <category> 组件 </category>
          
          <category> Caffeine </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/12/hello-world/"/>
      <url>/2022/07/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Fluid-Theme"><a href="#Fluid-Theme" class="headerlink" title="Fluid Theme"></a>Fluid Theme</h3><p>More info: <a href="https://vlts.cc/v5/getting-started/">Doc</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
